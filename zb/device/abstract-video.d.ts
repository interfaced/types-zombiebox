import EventPublisher from '../events/event-publisher';
import IVideo, { State } from './interfaces/i-video';
import IViewPort from './interfaces/i-view-port';
import Rect from '../geometry/rect';

export default abstract class AbstractVideo extends EventPublisher implements IVideo {
  protected _state: State;
  constructor(rect: Rect);
  EVENT_LOAD_START: string;
  EVENT_TIME_UPDATE: string;
  EVENT_BUFFERING: string;
  EVENT_ERROR: string;
  EVENT_LOADED_META_DATA: string;
  EVENT_ENDED: string;
  EVENT_DURATION_CHANGE: string;
  EVENT_PLAY: string;
  EVENT_PAUSE: string;
  EVENT_STOP: string;
  EVENT_RATE_CHANGE: string;
  EVENT_VOLUME_CHANGE: string;
  EVENT_STATE_CHANGE: string;
  abstract play(url: string, opt_startFrom?: number): void;
  abstract resume(): void;
  abstract pause(): void;
  abstract stop(): void;
  abstract forward(): boolean;
  abstract rewind(): boolean;
  abstract destroy(): void;
  abstract setPlaybackRate(rate: number): void;
  abstract getPlaybackRate(): number;
  abstract setPosition(milliseconds: number): void;
  abstract getPosition(): number;
  abstract getDuration(): number;
  abstract setVolume(value: number): void;
  abstract getVolume(): number;
  abstract getUrl(): string;
  togglePause(): void;
  volumeUp(opt_stp?: number): number;
  volumeDown(opt_step?: number): number;
  setMuted(value: boolean): void;
  getMuted(): boolean;
  isMuted(): boolean;
  toggleMuted(): void;
  getState(): State;
  getViewport(): IViewPort;
  protected abstract _createViewPort(containerRect: Rect): IViewPort;
  protected _changeVolume(diff: number): number;
  protected _initViewPort(): void;
  protected _setState(state: State): void;
}
