import EventPublisher from '../events/event-publisher';
import IVideo, { State } from './interfaces/i-video';
import IViewPort from './interfaces/i-view-port';
import Rect from '../geometry/rect';

export default abstract class AbstractVideo extends EventPublisher implements IVideo {
  protected _state: State;
  protected constructor(rect: Rect);
  public EVENT_LOAD_START: string;
  public EVENT_TIME_UPDATE: string;
  public EVENT_BUFFERING: string;
  public EVENT_ERROR: string;
  public EVENT_LOADED_META_DATA: string;
  public EVENT_ENDED: string;
  public EVENT_DURATION_CHANGE: string;
  public EVENT_PLAY: string;
  public EVENT_PAUSE: string;
  public EVENT_STOP: string;
  public EVENT_RATE_CHANGE: string;
  public EVENT_VOLUME_CHANGE: string;
  public EVENT_STATE_CHANGE: string;
  public abstract play(url: string, opt_startFrom?: number): void;
  public abstract resume(): void;
  public abstract pause(): void;
  public abstract stop(): void;
  public abstract forward(): boolean;
  public abstract rewind(): boolean;
  public abstract destroy(): void;
  public abstract setPlaybackRate(rate: number): void;
  public abstract getPlaybackRate(): number;
  public abstract setPosition(milliseconds: number): void;
  public abstract getPosition(): number;
  public abstract getDuration(): number;
  public abstract setVolume(value: number): void;
  public abstract getVolume(): number;
  public abstract getUrl(): string;
  public togglePause(): void;
  public volumeUp(opt_stp?: number): number;
  public volumeDown(opt_step?: number): number;
  public setMuted(value: boolean): void;
  public getMuted(): boolean;
  public isMuted(): boolean;
  public toggleMuted(): void;
  public getState(): State;
  public getViewport(): IViewPort;
  protected abstract _createViewPort(containerRect: Rect): IViewPort;
  protected _changeVolume(diff: number): number;
  protected _initViewPort(): void;
  protected _setState(state: State): void;
}
